import { configureStore, combineReducers, Middleware, AnyAction } from '@reduxjs/toolkit';
import {
  TypedUseSelectorHook,
  useDispatch as useReduxDispatch,
  useSelector as useReduxSelector,
} from 'react-redux';

import ingredientsReducer from './ingredients/ingredients.slice';
import { userReducer } from './user/user.slice';
import constructorReducer from './constructor/constructor.slice';
import { createSocketMiddleware } from './realtime/socketMiddleware';
import { publicOrdersReducer, publicOrdersActions } from './orders/publicOrders.slice';
import { profileOrdersReducer, profileOrdersActions } from './orders/profileOrders.slice';
import { placeOrderReducer } from './orders/placeOrder.slice';
import { currentOrderReducer } from './orders/currentOrder.slice';

// IMPORTANT: do NOT import RootState from './store' here – it causes a circular reference.

const rootReducer = combineReducers({
  ingredients: ingredientsReducer,
  user: userReducer,
  burgerConstructor: constructorReducer,
  publicOrders: publicOrdersReducer,
  profileOrders: profileOrdersReducer,
  placeOrder: placeOrderReducer,
  currentOrder: currentOrderReducer,
});

// A local type we can use *before* the store exists (avoids circular typing)
type RootStateDraft = ReturnType<typeof rootReducer>;

// Create WebSocket middlewares
const publicOrdersWS = createSocketMiddleware({
  connect: publicOrdersActions.connect.type,
  disconnect: publicOrdersActions.disconnect.type,
  onOpen: publicOrdersActions.onOpen.type,
  onClose: publicOrdersActions.onClose.type,
  onError: publicOrdersActions.onError.type,
  onMessage: publicOrdersActions.onMessage.type,
});

const profileOrdersWS = createSocketMiddleware({
  connect: profileOrdersActions.connect.type,
  disconnect: profileOrdersActions.disconnect.type,
  onOpen: profileOrdersActions.onOpen.type,
  onClose: profileOrdersActions.onClose.type,
  onError: profileOrdersActions.onError.type,
  onMessage: profileOrdersActions.onMessage.type,
});

// --- Constructor persist middleware ---
const CONSTRUCTOR_STORAGE_KEY = 'sb_constructor';

const persistConstructorMiddleware: Middleware<{}, RootStateDraft> =
  (store) => (next) => (action: AnyAction) => {
    const result = next(action);

    // Actions from the constructor slice start with 'burgerConstructor/'
    if (typeof action.type === 'string' && action.type.startsWith('burgerConstructor/')) {
      try {
        const state = store.getState();
        const { bun, items } = state.burgerConstructor;
        localStorage.setItem(CONSTRUCTOR_STORAGE_KEY, JSON.stringify({ bun, items }));
      } catch {
        // ignore storage errors
      }
    }

    return result;
  };

export const store = configureStore({
  reducer: rootReducer,
  devTools: process.env.NODE_ENV !== 'production',
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(publicOrdersWS, profileOrdersWS, persistConstructorMiddleware),
});

// Export the real RootState – safe now that the store exists
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

// typed hooks
export const useAppSelector: TypedUseSelectorHook<RootState> = useReduxSelector;
export const useAppDispatch = () => useReduxDispatch<AppDispatch>();

export default store;
