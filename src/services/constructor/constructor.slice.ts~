import { createSlice, PayloadAction, nanoid, createSelector } from '@reduxjs/toolkit';
import type { RootState } from '../store';
import type { TIngredient } from '@utils-types';

export type TConstructorItem = TIngredient & { uuid: string };
export type TConstructorIngredient = TConstructorItem;

type ConstructorState = {
  bun: TIngredient | null;
  ingredients: TConstructorItem[];
  orderRequest: boolean;
  orderNumber: number | null;
};

const initialState: ConstructorState = {
  bun: null,
  ingredients: [],
  orderRequest: false,
  orderNumber: null,
};

const constructorSlice = createSlice({
  name: 'constructor',
  initialState,
  reducers: {
    addIngredient: {
      reducer(state, action: PayloadAction<TConstructorItem>) {
        state.ingredients.push(action.payload);
      },
      prepare(ingredient: TIngredient): { payload: TConstructorItem } {
        return { payload: { ...ingredient, uuid: nanoid() } };
      },
    },

    setBun(state, action: PayloadAction<TIngredient | null>) {
      state.bun = action.payload;
    },

    removeItem(state, action: PayloadAction<string>) {
      state.ingredients = state.ingredients.filter((i) => i.uuid !== action.payload);
    },

    clearConstructor(state) {
      state.bun = null;
      state.ingredients = [];
    },
  },
});

export const { addIngredient, setBun, removeItem, clearConstructor } = constructorSlice.actions;
export { addIngredient as addItem };
export default constructorSlice.reducer;

const selectConstructorState = (s: RootState) => s.burgerConstructor;

export const selectConstructorBun = (s: RootState) => selectConstructorState(s).bun;

export const selectConstructorItems = (s: RootState) =>
  selectConstructorState(s).ingredients as TConstructorItem[];

export const selectTotalPrice = createSelector(
  [selectConstructorBun, selectConstructorItems],
  (bun, items) => {
    const buns = bun ? bun.price * 2 : 0;
    const mids = items.reduce((sum, it) => sum + it.price, 0);
    return buns + mids;
  },
);

export const selectCountsMap = createSelector(
  [selectConstructorBun, selectConstructorItems],
  (bun, items): Record<string, number> => {
    const map: Record<string, number> = {};
    if (bun?._id) {
      map[bun._id] = (map[bun._id] || 0) + 2;
    }
    for (const it of items) {
      const id = (it as TIngredient)._id;
      if (!id) continue;
      map[id] = (map[id] || 0) + 1;
    }
    return map;
  },
);
