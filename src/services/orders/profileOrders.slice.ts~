// src/services/orders/profileOrders.slice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '../store';
import type { TOrder } from '@utils-types';

type ProfileOrdersState = {
  connected: boolean;
  orders: TOrder[];
  error?: string | null;
};

const initialState: ProfileOrdersState = {
  connected: false,
  orders: [],
  error: null,
};

type WSFeed = {
  orders: TOrder[];
  total?: number; // ignored here, but tolerated
  totalToday?: number; // ignored here, but tolerated
};

const profileOrdersSlice = createSlice({
  name: 'profileOrders',
  initialState,
  reducers: {
    // payload = ws url
    connect: (_s, _a: PayloadAction<string>) => {},
    disconnect: () => {},

    onOpen: (state) => {
      state.connected = true;
      state.error = null;
    },
    onClose: (state) => {
      state.connected = false;
    },

    // allow optional payload so middleware can dispatch onError() with no args
    onError: (state, action: PayloadAction<string | undefined>) => {
      state.error = action.payload ?? null;
    },

    // replace orders list on each frame
    onMessage: (state, action: PayloadAction<WSFeed>) => {
      state.orders = action.payload.orders ?? [];
    },
  },
});

export const { reducer: profileOrdersReducer, actions: profileOrdersActions } = profileOrdersSlice;

export const selectProfileOrders = (s: RootState) => s.profileOrders.orders;
export const selectProfileConnected = (s: RootState) => s.profileOrders.connected;
export const selectProfileError = (s: RootState) => s.profileOrders.error;
