import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { TOrder } from '@utils-types';
import { createSelector } from '@reduxjs/toolkit';
import type { RootState } from '../store';

type WsPayload = {
  success: boolean;
  orders: TOrder[];
  total: number;
  totalToday: number;
};

export type PublicOrdersState = {
  connected: boolean;
  error: string | null;
  orders: TOrder[]; // newest-first for UI
  total: number;
  totalToday: number;
};

const initialState: PublicOrdersState = {
  connected: false,
  error: null,
  orders: [],
  total: 0,
  totalToday: 0,
};

const publicOrdersSlice = createSlice({
  name: 'publicOrders',
  initialState,
  reducers: {
    // middleware listens to these types only
    connect: (_state, _action: PayloadAction<string>) => {},
    disconnect: (_state) => {},

    onOpen: (state) => {
      state.connected = true;
      state.error = null;
    },
    onClose: (state) => {
      state.connected = false;
    },
    onError: (state, action: PayloadAction<string | undefined>) => {
      state.error = action.payload ?? 'ws error';
    },
    onMessage: (state, action: PayloadAction<WsPayload>) => {
      const { orders, total, totalToday } = action.payload || ({} as WsPayload);
      // reverse: API gives oldest->newest; we want newest first
      state.orders = Array.isArray(orders) ? [...orders].reverse() : [];
      state.total = total ?? 0;
      state.totalToday = totalToday ?? 0;
    },
    clear: () => initialState,
  },
});

export const publicOrdersActions = publicOrdersSlice.actions;
export const publicOrdersReducer = publicOrdersSlice.reducer;

// ---------- selectors ----------
export const selectPublicSlice = (s: RootState) => s.publicOrders;

export const selectPublicConnected = createSelector(selectPublicSlice, (s) => s.connected);

export const selectPublicOrders = createSelector(selectPublicSlice, (s) => s.orders);

export const selectPublicTotal = createSelector(selectPublicSlice, (s) => s.total);

export const selectPublicTotalToday = createSelector(selectPublicSlice, (s) => s.totalToday);

export const selectPublicReadyNumbers = createSelector(selectPublicOrders, (orders) =>
  orders
    .filter((o) => o.status === 'done')
    .slice(0, 10)
    .map((o) => o.number),
);

export const selectPublicPendingNumbers = createSelector(selectPublicOrders, (orders) =>
  orders
    .filter((o) => o.status === 'pending')
    .slice(0, 10)
    .map((o) => o.number),
);
