// src/components/app/ProtectedRoute.tsx
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAppSelector } from '../../services/store';
import { selectIsAuth } from '../../services/user/user.slice';

/** Pages that require an authenticated user (e.g. /profile, /profile/orders) */
export function RequireAuth() {
  const isAuth = useAppSelector(selectIsAuth);
  const isAuthChecked = useAppSelector((s) => (s.user as any)?.isAuthChecked) ?? true;
  const location = useLocation();

  // Wait for the initial auth check to finish
  if (!isAuthChecked) return null;

  // Not logged in → go to /login, but avoid redirecting *to the same path*
  if (!isAuth) {
    if (location.pathname === '/login') return null;
    return <Navigate to='/login' replace state={{ from: location }} />;
  }

  return <Outlet />;
}

/** Pages that must be hidden from authenticated users (e.g. /login, /register) */
export function OnlyUnAuth() {
  const isAuth = useAppSelector(selectIsAuth);
  const isAuthChecked = useAppSelector((s) => (s.user as any)?.isAuthChecked) ?? true;
  const location = useLocation();

  if (!isAuthChecked) return null;

  // Already logged in → go to "from" or home; never navigate to the same URL
  if (isAuth) {
    const to =
      (location.state as { from?: { pathname?: string } } | undefined)?.from?.pathname ?? '/';
    return <Navigate to={to === location.pathname ? '/' : to} replace />;
  }

  return <Outlet />;
}
