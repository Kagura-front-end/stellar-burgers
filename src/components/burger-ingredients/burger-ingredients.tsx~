import { FC, useEffect, useMemo, useRef, useState } from 'react';
import { useAppDispatch, useAppSelector } from '../../services/hooks';
import { fetchIngredients, selectIngredients } from '../../services/ingredients/ingredients.slice';
import { addItem, setBun, selectCountsMap } from '../../services/constructor/constructor.slice';
import type { TIngredient } from '@utils-types';
import { BurgerIngredientsUI } from '../ui/burger-ingredients';
import { useLocation } from 'react-router-dom';

const TABS = { buns: 'buns', fillings: 'fillings' } as const;
type TabValue = 'buns' | 'fillings';

export const BurgerIngredients: FC = () => {
  const dispatch = useAppDispatch();
  const location = useLocation();

  const items = useAppSelector(selectIngredients);
  const countsMap = useAppSelector(selectCountsMap);

  useEffect(() => {
    if (!items.length) {
      dispatch(fetchIngredients());
    }
  }, [dispatch, items.length]);

  const buns = useMemo(() => items.filter((i: TIngredient) => i.type === 'bun'), [items]);
  const sauces = useMemo(() => items.filter((i: TIngredient) => i.type === 'sauce'), [items]);
  const mains = useMemo(() => items.filter((i: TIngredient) => i.type === 'main'), [items]);

  const [currentTab, setCurrentTab] = useState<TabValue>(TABS.buns);

  const scrollRef = useRef<HTMLDivElement>(null);
  const titleBunRef = useRef<HTMLHeadingElement>(null);
  const titleSauceRef = useRef<HTMLHeadingElement>(null);
  const titleMainRef = useRef<HTMLHeadingElement>(null);

  const handleAdd = (ingredient: TIngredient) => {
    if (ingredient.type === 'bun') {
      dispatch(setBun(ingredient));
    } else {
      dispatch(addItem(ingredient));
    }
  };

  const onTabClick = (tab: TabValue) => {
    setCurrentTab(tab);
    if (tab === TABS.buns) {
      titleBunRef.current?.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    } else {
      titleMainRef.current?.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    }
  };

  useEffect(() => {
    const root = scrollRef.current;
    if (!root) return;

    const io = new IntersectionObserver(
      (entries) => {
        const visible = new Set(
          entries.filter((e) => e.isIntersecting).map((e) => e.target.getAttribute('data-section')),
        );

        if (visible.has('bun')) {
          setCurrentTab(TABS.buns);
        } else if (visible.has('sauce') || visible.has('main')) {
          setCurrentTab(TABS.fillings);
        }
      },
      {
        root,
        threshold: 0.4,
        rootMargin: '-10% 0px -60% 0px',
      },
    );

    const heads = [titleBunRef.current, titleSauceRef.current, titleMainRef.current].filter(
      (n): n is HTMLElement => Boolean(n),
    );
    heads.forEach((h) => io.observe(h));

    return () => io.disconnect();
  }, []);

  return (
    <BurgerIngredientsUI
      currentTab={currentTab}
      buns={buns}
      sauces={sauces}
      mains={mains}
      titleBunRef={titleBunRef}
      titleSauceRef={titleSauceRef}
      titleMainRef={titleMainRef}
      scrollRef={scrollRef}
      countsMap={countsMap}
      handleAdd={handleAdd}
      onTabClick={onTabClick}
      locationState={{ background: location }}
    />
  );
};

export default BurgerIngredients;
