import { FC } from 'react';
import { ConstructorElement } from '@zlden/react-developer-burger-ui-components';
import { BurgerConstructorElementUI } from '../burger-constructor-element/burger-constructor-element';
import styles from './burger-constructor.module.css';

export type BurgerConstructorUIProps = {
  constructorItems: {
    bun: { name: string; price: number; image: string } | null;
    middle: Array<{ uuid: string; name: string; price: number; image: string }>;
  };
  handleRemove: (item: { uuid: string }) => void;
  price: number;
  orderRequest: boolean;
  orderNumber: number | null;
  onOrderClick: () => void | Promise<void>;
  closeOrderModal: () => void;
};

export const BurgerConstructorUI: FC<BurgerConstructorUIProps> = ({
  constructorItems,
  handleRemove,
  price,
  orderRequest,
  orderNumber,
  onOrderClick,
  closeOrderModal,
}) => {
  const hasMiddle = constructorItems.middle.length > 0;

  return (
    <section className={styles.burger_constructor}>
      {constructorItems.bun && (
        <div className={styles.edgeFrame}>
          <div className={`${styles.row} ${styles.rowTop}`}>
            <button
              className={styles.rowHandle}
              type='button'
              aria-hidden='true'
              tabIndex={-1}
              disabled
            />
            <div className={styles.rowTab}>
              <ConstructorElement
                type='top'
                isLocked
                text={`${constructorItems.bun.name} (верх)`}
                price={constructorItems.bun.price}
                thumbnail={constructorItems.bun.image}
              />
            </div>
          </div>
        </div>
      )}

      <div className={styles.scrollArea}>
        <ul className={styles.list}>
          {hasMiddle ? (
            constructorItems.middle.map((item) => (
              <li key={item.uuid} className={styles.row}>
                <button className={styles.rowHandle} aria-label='Переместить' />
                <div className={styles.rowTab}>
                  <BurgerConstructorElementUI
                    ingredient={item}
                    onClose={() => handleRemove(item)}
                  />
                </div>
              </li>
            ))
          ) : (
            <li className={styles.row}>
              <span className={styles.rowHandle} aria-hidden='true' />
              <div className={styles.rowTab}>
                <div className='constructor-element'>
                  <span className='text text_type_main-default text_color_inactive'>
                    Выберите начинку
                  </span>
                </div>
              </div>
            </li>
          )}
        </ul>
      </div>

      {constructorItems.bun && (
        <div className={styles.edgeFrame}>
          <div className={`${styles.row} ${styles.rowBottom}`}>
            <button
              className={styles.rowHandle}
              type='button'
              aria-hidden='true'
              tabIndex={-1}
              disabled
            />
            <div className={styles.rowTab}>
              <ConstructorElement
                type='bottom'
                isLocked
                text={`${constructorItems.bun.name} (низ)`}
                price={constructorItems.bun.price}
                thumbnail={constructorItems.bun.image}
              />
            </div>
          </div>
        </div>
      )}
    </section>
  );
};

export { BurgerConstructorUI as default };
