import React, { FC } from 'react';
import {
  Button,
  ConstructorElement,
  CurrencyIcon,
} from '@zlden/react-developer-burger-ui-components';
import styles from './burger-constructor.module.css';
import { BurgerConstructorUIProps } from './type';
import type { TConstructorIngredient } from '../../../services/constructor/constructor.slice';
import { BurgerConstructorElement, Modal } from '@components';
import { Preloader, OrderDetailsUI } from '@ui';

export const BurgerConstructorUI: FC<BurgerConstructorUIProps> = ({
  constructorItems,
  orderRequest,
  price,
  orderModalData,
  onOrderClick,
  closeOrderModal,
}) => {
  // Разделяем ингредиенты на соусы и начинки
  const sauces = constructorItems.ingredients.filter((i) => i.type === 'sauce');
  const mains = constructorItems.ingredients.filter((i) => i.type === 'main');

  return (
    <section className={styles.burger_constructor}>
      {/* Верхняя булка */}
      {constructorItems.bun ? (
        <div className={`${styles.element} mb-4 mr-4`}>
          <ConstructorElement
            type='top'
            isLocked
            text={`${constructorItems.bun.name} (верх)`}
            price={constructorItems.bun.price}
            thumbnail={constructorItems.bun.image}
          />
        </div>
      ) : (
        <div
          className={`${styles.noBuns} ${styles.noBunsTop} ml-8 mb-4 mr-5 text text_type_main-default`}
        >
          Выберите булки
        </div>
      )}

      {/* Прокручиваемая зона с секциями */}
      <ul className={styles.elements}>
        {/* Секция начинок */}
        <div className={styles.subsection}>
          {mains.length > 0 ? (
            mains.map((item: TConstructorIngredient, index: number) => (
              <BurgerConstructorElement
                ingredient={item}
                index={index}
                totalItems={mains.length}
                key={item.uuid}
              />
            ))
          ) : (
            <div className={`${styles.noItems} ml-8 mb-4 mr-5 text text_type_main-default`}>
              Выберите начинку
            </div>
          )}
        </div>

        {/* Секция соусов */}
        <div className={styles.subsection}>
          {sauces.length > 0 ? (
            sauces.map((item: TConstructorIngredient, index: number) => (
              <BurgerConstructorElement
                ingredient={item}
                index={index}
                totalItems={sauces.length}
                key={item.uuid}
              />
            ))
          ) : (
            <div className={`${styles.noItems} ml-8 mb-4 mr-5 text text_type_main-default`}>
              Выберите соусы
            </div>
          )}
        </div>
      </ul>

      {/* Нижняя булка */}
      {constructorItems.bun ? (
        <div className={`${styles.element} mt-4 mr-4`}>
          <ConstructorElement
            type='bottom'
            isLocked
            text={`${constructorItems.bun.name} (низ)`}
            price={constructorItems.bun.price}
            thumbnail={constructorItems.bun.image}
          />
        </div>
      ) : (
        <div
          className={`${styles.noBuns} ${styles.noBunsBottom} ml-8 mb-4 mr-5 text text_type_main-default`}
        >
          Выберите булки
        </div>
      )}

      <div className={`${styles.total} mt-10 mr-4`}>
        <div className={`${styles.cost} mr-10`}>
          <p className={`text ${styles.text} mr-2`}>{price}</p>
          <CurrencyIcon type='primary' />
        </div>
        <Button
          htmlType='button'
          type='primary'
          size='large'
          children='Оформить заказ'
          onClick={onOrderClick}
          disabled={!constructorItems.bun || constructorItems.ingredients.length === 0}
        />
      </div>

      {orderRequest && (
        <Modal onClose={closeOrderModal} title={'Оформляем заказ...'}>
          <Preloader />
        </Modal>
      )}

      {orderModalData && (
        <Modal onClose={closeOrderModal} title={orderRequest ? 'Оформляем заказ...' : ''}>
          <OrderDetailsUI orderNumber={orderModalData.number} />
        </Modal>
      )}
    </section>
  );
};

export default BurgerConstructorUI;
