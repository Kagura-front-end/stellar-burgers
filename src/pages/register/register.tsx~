import { FC, useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useAppDispatch, useAppSelector } from '../../services/store';
import { RegisterUI } from '@ui-pages';
import { registerUserThunk } from '../../services/user/user.slice';

export const Register: FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  const errorText = useAppSelector((s) => s.user.error ?? '');

  // Separate state fields so we can pass setters directly to RegisterUI
  const [userName, setUserName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // RegisterUI expects a void-returning handler (not async)
  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (e) => {
    e.preventDefault();

    // Run the async flow without changing the handler's return type
    (async () => {
      const res = await dispatch(registerUserThunk({ name: userName, email, password }));
      if (res.meta.requestStatus === 'fulfilled') {
        const to =
          (location.state as { from?: { pathname?: string } } | undefined)?.from?.pathname ?? '/';
        navigate(to, { replace: true });
      }
    })();
  };

  return (
    <>
      <RegisterUI
        errorText={errorText}
        userName={userName}
        setUserName={setUserName}
        email={email}
        setEmail={setEmail}
        password={password}
        setPassword={setPassword}
        handleSubmit={handleSubmit}
      />

      <p className='text text_type_main-default text_color_inactive'>
        Уже зарегистрированы?{' '}
        <Link to='/login' state={{ from: location }}>
          Войти
        </Link>
      </p>
    </>
  );
};
